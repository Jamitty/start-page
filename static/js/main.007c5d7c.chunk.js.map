{"version":3,"sources":["Components/Modal.js","Components/Shortcuts.js","Components/AddShortcut.js","Components/AddShortcutForm.js","App.js","serviceWorker.js","index.js"],"names":["Modal","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","el","document","createElement","getElementById","appendChild","removeChild","ReactDOM","createPortal","children","React","Component","Shortcuts","react_default","a","className","href","library","add","faPlus","AddShortcut","onClick","handleClick","index_es","icon","AddShortcutForm","type","placeholder","App","e","preventDefault","setState","modalState","state","modal","Modal_Modal","src_Components_AddShortcutForm","src_Components_Shortcuts","src_Components_AddShortcut","Boolean","window","location","hostname","match","render","App_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+UAIqBA,2BACjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,GAAKC,SAASC,cAAc,OAFlBT,mFAMfQ,SAASE,eAAe,cAAcC,YAAYR,KAAKI,mDAIvDC,SAASE,eAAe,cAAcE,YAAYT,KAAKI,qCAKvD,OAAOM,IAASC,aAAaX,KAAKJ,MAAMgB,SAAUZ,KAAKI,WAhB5BS,IAAMC,YCe1BC,SAfG,WAEd,OAGQC,EAAAC,EAAAX,cAAA,OAAKY,UAAU,YACXF,EAAAC,EAAAX,cAAA,OAAKY,UAAU,SAAQF,EAAAC,EAAAX,cAAA,yBACvBU,EAAAC,EAAAX,cAAA,OAAKY,UAAU,QAAOF,EAAAC,EAAAX,cAAA,KAAGa,KAAK,KAAR,0DCNtCC,IAAQC,IAAIC,KAIZ,IAUeC,EAVK,SAAC3B,GACjB,OACIoB,EAAAC,EAAAX,cAAA,OACIY,UAAU,wBACVM,QAAS5B,EAAM6B,aACXT,EAAAC,EAAAX,cAACoB,EAAA,EAAD,CAAiBC,KAAK,WCOvBC,SAjBS,SAAChC,GAIjB,OACIoB,EAAAC,EAAAX,cAAA,OAAKY,UAAU,aACXF,EAAAC,EAAAX,cAAA,SAAOuB,KAAK,OAAOC,YAAY,WAC/Bd,EAAAC,EAAAX,cAAA,SAAOuB,KAAK,OAAOC,YAAY,QAC/Bd,EAAAC,EAAAX,cAAA,qBACAU,EAAAC,EAAAX,cAAA,UAAQkB,QAAS5B,EAAM6B,aAAvB,YCNKM,cACnB,SAAAA,EAAYnC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+B,IAChBlC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiC,GAAA5B,KAAAH,KAAMJ,KAOR6B,YAAc,SAACO,GACbA,EAAEC,iBACFpC,EAAKqC,SAAS,CACZC,YAAatC,EAAKuC,MAAMD,cAT1BtC,EAAKuC,MAAQ,CACXD,YAAY,GAHEtC,wEAkBhB,IAAMwC,EAAQrC,KAAKoC,MAAMD,WAAanB,EAAAC,EAAAX,cAACgC,EAAD,KAAOtB,EAAAC,EAAAX,cAACiC,EAAD,CAAiBd,YAAazB,KAAKyB,eAAyB,KAEzG,OACET,EAAAC,EAAAX,cAAA,OAAKY,UAAU,OACbF,EAAAC,EAAAX,cAAA,OAAKY,UAAU,qBACbF,EAAAC,EAAAX,cAACkC,EAAD,MACAxB,EAAAC,EAAAX,cAACmC,EAAD,CAAahB,YAAczB,KAAKyB,cAC/BY,WA1BsBvB,aCKb4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNpC,IAASqC,OAAO/B,EAAAC,EAAAX,cAAC0C,EAAD,MAAS3C,SAASE,eAAe,aD2H3C,kBAAmB0C,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.007c5d7c.chunk.js","sourcesContent":["import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './Modal.scss'\r\n\r\nexport default class Modal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.el = document.createElement('div');\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.getElementById('modal-root').appendChild(this.el)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.getElementById('modal-root').removeChild(this.el)\r\n    }\r\n\r\n\r\n    render() {\r\n        return ReactDOM.createPortal(this.props.children, this.el)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","import React from 'react';\r\nimport './Shortcuts.scss'\r\n\r\n\r\nconst Shortcuts = () => {\r\n\r\n    return (\r\n        \r\n\r\n            <div className=\"shortcut\" >\r\n                <div className=\"cover\"><p>r/argentina</p></div>\r\n                <div className=\"text\"><a href=\"#\">https://www.url.com</a></div>\r\n            </div>\r\n        \r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Shortcuts","import React from 'react'\r\nimport './AddShortcut.scss'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\r\nlibrary.add(faPlus)\r\n\r\n\r\n\r\nconst AddShortcut = (props) => {\r\n    return (\r\n        <div \r\n            className='add-shortcut shortcut' \r\n            onClick={props.handleClick}>\r\n                <FontAwesomeIcon icon=\"plus\"  />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddShortcut","import React from 'react'\r\n\r\nimport './AddShortcutForm.scss'\r\n\r\nconst AddShortcutForm = (props) => {\r\n\r\n\r\n    \r\n        return (\r\n            <div className='container'>\r\n                <input type='text' placeholder='tittle'></input>\r\n                <input type='text' placeholder='url'></input>\r\n                <button>Add</button>\r\n                <button onClick={props.handleClick}>Close</button>\r\n            </div>\r\n\r\n\r\n        )\r\n    \r\n}\r\n\r\nexport default AddShortcutForm","import React, { Component } from 'react';\r\nimport './App.scss';\r\nimport Modal from './Components/Modal'\r\nimport Shortcuts from './Components/Shortcuts'\r\nimport AddShortcut from './Components/AddShortcut'\r\nimport AddShortcutForm from './Components/AddShortcutForm'\r\n\r\nexport default class App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      modalState: false\r\n    }\r\n  }\r\n\r\n\r\n  handleClick = (e) => {\r\n    e.preventDefault()\r\n    this.setState({\r\n      modalState: !this.state.modalState\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const modal = this.state.modalState ? <Modal><AddShortcutForm handleClick={this.handleClick}/></Modal> : null\r\n\r\n    return (\r\n      <div className=\"App\">  \r\n        <div className='shortcuts-section'>\r\n          <Shortcuts />\r\n          <AddShortcut handleClick={ this.handleClick }/>\r\n          {modal}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('app-root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}